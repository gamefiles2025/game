import{E as g,U as tt,T as ne,k as A,c as xe,w as be,H as B,t as G,P as rt,a3 as N,R as $,F as ye,M as P,a0 as Q,a1 as Te,b as k,B as w,y as b,a9 as at,aa as J,K as j,ab as z,s as Z,u as st,G as it,Z as ve,ac as nt,m as Se,p as Be,a4 as we,a7 as Ce,q as ot,n as ut,o as dt,a5 as lt,a6 as ct,a8 as ht,ad as ft,ae as pt,af as gt,ag as K,ah as mt,D as Pe,l as H,ai as _t,aj as xt,ak as bt,O as oe,al as F,am as ue,an as de,ao as yt,ap as le,e as T,aq as Tt}from"./index-CWPhLIi9.js";import{S as O,c as V,a as vt,b as St,B as Re}from"./colorToUniform-C2GHuDhf.js";class Me{static init(e){Object.defineProperty(this,"resizeTo",{set(t){globalThis.removeEventListener("resize",this.queueResize),this._resizeTo=t,t&&(globalThis.addEventListener("resize",this.queueResize),this.resize())},get(){return this._resizeTo}}),this.queueResize=()=>{this._resizeTo&&(this._cancelResize(),this._resizeId=requestAnimationFrame(()=>this.resize()))},this._cancelResize=()=>{this._resizeId&&(cancelAnimationFrame(this._resizeId),this._resizeId=null)},this.resize=()=>{if(!this._resizeTo)return;this._cancelResize();let t,r;if(this._resizeTo===globalThis.window)t=globalThis.innerWidth,r=globalThis.innerHeight;else{const{clientWidth:a,clientHeight:i}=this._resizeTo;t=a,r=i}this.renderer.resize(t,r),this.render()},this._resizeId=null,this._resizeTo=null,this.resizeTo=e.resizeTo||null}static destroy(){globalThis.removeEventListener("resize",this.queueResize),this._cancelResize(),this._cancelResize=null,this.queueResize=null,this.resizeTo=null,this.resize=null}}Me.extension=g.Application;class Ue{static init(e){e=Object.assign({autoStart:!0,sharedTicker:!1},e),Object.defineProperty(this,"ticker",{set(t){this._ticker&&this._ticker.remove(this.render,this),this._ticker=t,t&&t.add(this.render,this,tt.LOW)},get(){return this._ticker}}),this.stop=()=>{this._ticker.stop()},this.start=()=>{this._ticker.start()},this._ticker=null,this.ticker=e.sharedTicker?ne.shared:new ne,e.autoStart&&this.start()}static destroy(){if(this._ticker){const e=this._ticker;this.ticker=null,e.destroy()}}}Ue.extension=g.Application;class Ge{constructor(e){this._renderer=e}push(e,t,r){this._renderer.renderPipes.batch.break(r),r.add({renderPipeId:"filter",canBundle:!1,action:"pushFilter",container:t,filterEffect:e})}pop(e,t,r){this._renderer.renderPipes.batch.break(r),r.add({renderPipeId:"filter",action:"popFilter",canBundle:!1})}execute(e){e.action==="pushFilter"?this._renderer.filter.push(e):e.action==="popFilter"&&this._renderer.filter.pop()}destroy(){this._renderer=null}}Ge.extension={type:[g.WebGLPipes,g.WebGPUPipes,g.CanvasPipes],name:"filter"};function Bt(o,e){e.clear();const t=e.matrix;for(let r=0;r<o.length;r++){const a=o[r];a.globalDisplayStatus<7||(e.matrix=a.worldTransform,e.addBounds(a.bounds))}return e.matrix=t,e}const wt=new N({attributes:{aPosition:{buffer:new Float32Array([0,0,1,0,1,1,0,1]),format:"float32x2",stride:2*4,offset:0}},indexBuffer:new Uint32Array([0,1,2,0,2,3])});class Fe{constructor(e){this._filterStackIndex=0,this._filterStack=[],this._filterGlobalUniforms=new A({uInputSize:{value:new Float32Array(4),type:"vec4<f32>"},uInputPixel:{value:new Float32Array(4),type:"vec4<f32>"},uInputClamp:{value:new Float32Array(4),type:"vec4<f32>"},uOutputFrame:{value:new Float32Array(4),type:"vec4<f32>"},uGlobalFrame:{value:new Float32Array(4),type:"vec4<f32>"},uOutputTexture:{value:new Float32Array(4),type:"vec4<f32>"}}),this._globalFilterBindGroup=new xe({}),this.renderer=e}get activeBackTexture(){var e;return(e=this._activeFilterData)==null?void 0:e.backTexture}push(e){var m;const t=this.renderer,r=e.filterEffect.filters;this._filterStack[this._filterStackIndex]||(this._filterStack[this._filterStackIndex]=this._getFilterData());const a=this._filterStack[this._filterStackIndex];if(this._filterStackIndex++,r.length===0){a.skip=!0;return}const i=a.bounds;if(e.renderables?Bt(e.renderables,i):e.filterEffect.filterArea?(i.clear(),i.addRect(e.filterEffect.filterArea),i.applyMatrix(e.container.worldTransform)):e.container.getFastGlobalBounds(!0,i),e.container){const h=(e.container.renderGroup||e.container.parentRenderGroup).cacheToLocalTransform;h&&i.applyMatrix(h)}const s=t.renderTarget.renderTarget.colorTexture.source;let n=1/0,u=0,l=!0,c=!1,d=!1,f=!0;for(let p=0;p<r.length;p++){const h=r[p];if(n=Math.min(n,h.resolution==="inherit"?s._resolution:h.resolution),u+=h.padding,h.antialias==="off"?l=!1:h.antialias==="inherit"&&l&&(l=s.antialias),h.clipToViewport||(f=!1),!!!(h.compatibleRenderers&t.type)){d=!1;break}if(h.blendRequired&&!(((m=t.backBuffer)==null?void 0:m.useBackBuffer)??!0)){be("Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options."),d=!1;break}d=h.enabled||d,c||(c=h.blendRequired)}if(!d){a.skip=!0;return}if(f){const p=t.renderTarget.rootViewPort,h=t.renderTarget.renderTarget.resolution;i.fitBounds(0,p.width/h,0,p.height/h)}if(i.scale(n).ceil().scale(1/n).pad(u|0),!i.isPositive){a.skip=!0;return}a.skip=!1,a.bounds=i,a.blendRequired=c,a.container=e.container,a.filterEffect=e.filterEffect,a.previousRenderSurface=t.renderTarget.renderSurface,a.inputTexture=B.getOptimalTexture(i.width,i.height,n,l),t.renderTarget.bind(a.inputTexture,!0),t.globalUniforms.push({offset:i})}pop(){const e=this.renderer;this._filterStackIndex--;const t=this._filterStack[this._filterStackIndex];if(t.skip)return;this._activeFilterData=t;const r=t.inputTexture,a=t.bounds;let i=G.EMPTY;if(e.renderTarget.finishRenderPass(),t.blendRequired){const n=this._filterStackIndex>0?this._filterStack[this._filterStackIndex-1].bounds:null,u=e.renderTarget.getRenderTarget(t.previousRenderSurface);i=this.getBackTexture(u,a,n)}t.backTexture=i;const s=t.filterEffect.filters;if(this._globalFilterBindGroup.setResource(r.source.style,2),this._globalFilterBindGroup.setResource(i.source,3),e.globalUniforms.pop(),s.length===1)s[0].apply(this,r,t.previousRenderSurface,!1),B.returnTexture(r);else{let n=t.inputTexture,u=B.getOptimalTexture(a.width,a.height,n.source._resolution,!1),l=0;for(l=0;l<s.length-1;++l){s[l].apply(this,n,u,!0);const d=n;n=u,u=d}s[l].apply(this,n,t.previousRenderSurface,!1),B.returnTexture(n),B.returnTexture(u)}t.blendRequired&&B.returnTexture(i)}getBackTexture(e,t,r){const a=e.colorTexture.source._resolution,i=B.getOptimalTexture(t.width,t.height,a,!1);let s=t.minX,n=t.minY;r&&(s-=r.minX,n-=r.minY),s=Math.floor(s*a),n=Math.floor(n*a);const u=Math.ceil(t.width*a),l=Math.ceil(t.height*a);return this.renderer.renderTarget.copyToTexture(e,i,{x:s,y:n},{width:u,height:l},{x:0,y:0}),i}applyFilter(e,t,r,a){const i=this.renderer,s=this._filterStack[this._filterStackIndex],n=s.bounds,u=rt.shared,c=s.previousRenderSurface===r;let d=this.renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution,f=this._filterStackIndex-1;for(;f>0&&this._filterStack[f].skip;)--f;f>0&&(d=this._filterStack[f].inputTexture.source._resolution);const m=this._filterGlobalUniforms,p=m.uniforms,h=p.uOutputFrame,_=p.uInputSize,x=p.uInputPixel,C=p.uInputClamp,v=p.uGlobalFrame,R=p.uOutputTexture;if(c){let M=this._filterStackIndex;for(;M>0;){M--;const U=this._filterStack[this._filterStackIndex-1];if(!U.skip){u.x=U.bounds.minX,u.y=U.bounds.minY;break}}h[0]=n.minX-u.x,h[1]=n.minY-u.y}else h[0]=0,h[1]=0;h[2]=t.frame.width,h[3]=t.frame.height,_[0]=t.source.width,_[1]=t.source.height,_[2]=1/_[0],_[3]=1/_[1],x[0]=t.source.pixelWidth,x[1]=t.source.pixelHeight,x[2]=1/x[0],x[3]=1/x[1],C[0]=.5*x[2],C[1]=.5*x[3],C[2]=t.frame.width*_[2]-.5*x[2],C[3]=t.frame.height*_[3]-.5*x[3];const D=this.renderer.renderTarget.rootRenderTarget.colorTexture;v[0]=u.x*d,v[1]=u.y*d,v[2]=D.source.width*d,v[3]=D.source.height*d;const S=this.renderer.renderTarget.getRenderTarget(r);if(i.renderTarget.bind(r,!!a),r instanceof G?(R[0]=r.frame.width,R[1]=r.frame.height):(R[0]=S.width,R[1]=S.height),R[2]=S.isRoot?-1:1,m.update(),i.renderPipes.uniformBatch){const M=i.renderPipes.uniformBatch.getUboResource(m);this._globalFilterBindGroup.setResource(M,0)}else this._globalFilterBindGroup.setResource(m,0);this._globalFilterBindGroup.setResource(t.source,1),this._globalFilterBindGroup.setResource(t.source.style,2),e.groups[0]=this._globalFilterBindGroup,i.encoder.draw({geometry:wt,shader:e,state:e._state,topology:"triangle-list"}),i.type===$.WEBGL&&i.renderTarget.finishRenderPass()}_getFilterData(){return{skip:!1,inputTexture:null,bounds:new ye,container:null,filterEffect:null,blendRequired:!1,previousRenderSurface:null}}calculateSpriteMatrix(e,t){const r=this._activeFilterData,a=e.set(r.inputTexture._source.width,0,0,r.inputTexture._source.height,r.bounds.minX,r.bounds.minY),i=t.worldTransform.copyTo(P.shared),s=t.renderGroup||t.parentRenderGroup;return s&&s.cacheToLocalTransform&&i.prepend(s.cacheToLocalTransform),i.invert(),a.prepend(i),a.scale(1/t.texture.frame.width,1/t.texture.frame.height),a.translate(t.anchor.x,t.anchor.y),a}}Fe.extension={type:[g.WebGLSystem,g.WebGPUSystem],name:"filter"};const Ae=class De extends N{constructor(...e){let t=e[0]??{};t instanceof Float32Array&&(Q(Te,"use new MeshGeometry({ positions, uvs, indices }) instead"),t={positions:t,uvs:e[1],indices:e[2]}),t={...De.defaultOptions,...t};const r=t.positions||new Float32Array([0,0,1,0,1,1,0,1]);let a=t.uvs;a||(t.positions?a=new Float32Array(r.length):a=new Float32Array([0,0,1,0,1,1,0,1]));const i=t.indices||new Uint32Array([0,1,2,0,2,3]),s=t.shrinkBuffersToFit,n=new k({data:r,label:"attribute-mesh-positions",shrinkToFit:s,usage:w.VERTEX|w.COPY_DST}),u=new k({data:a,label:"attribute-mesh-uvs",shrinkToFit:s,usage:w.VERTEX|w.COPY_DST}),l=new k({data:i,label:"index-mesh-buffer",shrinkToFit:s,usage:w.INDEX|w.COPY_DST});super({attributes:{aPosition:{buffer:n,format:"float32x2",stride:2*4,offset:0},aUV:{buffer:u,format:"float32x2",stride:2*4,offset:0}},indexBuffer:l,topology:t.topology}),this.batchMode="auto"}get positions(){return this.attributes.aPosition.buffer.data}set positions(e){this.attributes.aPosition.buffer.data=e}get uvs(){return this.attributes.aUV.buffer.data}set uvs(e){this.attributes.aUV.buffer.data=e}get indices(){return this.indexBuffer.data}set indices(e){this.indexBuffer.data=e}};Ae.defaultOptions={topology:"triangle-list",shrinkBuffersToFit:!1};let ee=Ae;class ke{constructor(e,t){this.state=O.for2d(),this._graphicsBatchesHash=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this.renderer=e,this._adaptor=t,this._adaptor.init(),this.renderer.renderableGC.addManagedHash(this,"_graphicsBatchesHash")}validateRenderable(e){const t=e.context,r=!!this._graphicsBatchesHash[e.uid],a=this.renderer.graphicsContext.updateGpuContext(t);return!!(a.isBatchable||r!==a.isBatchable)}addRenderable(e,t){const r=this.renderer.graphicsContext.updateGpuContext(e.context);e.didViewUpdate&&this._rebuild(e),r.isBatchable?this._addToBatcher(e,t):(this.renderer.renderPipes.batch.break(t),t.add(e))}updateRenderable(e){const t=this._graphicsBatchesHash[e.uid];if(t)for(let r=0;r<t.length;r++){const a=t[r];a._batcher.updateElement(a)}}destroyRenderable(e){this._graphicsBatchesHash[e.uid]&&this._removeBatchForRenderable(e.uid),e.off("destroyed",this._destroyRenderableBound)}execute(e){if(!e.isRenderable)return;const t=this.renderer,r=e.context;if(!t.graphicsContext.getGpuContext(r).batches.length)return;const i=r.customShader||this._adaptor.shader;this.state.blendMode=e.groupBlendMode;const s=i.resources.localUniforms.uniforms;s.uTransformMatrix=e.groupTransform,s.uRound=t._roundPixels|e._roundPixels,V(e.groupColorAlpha,s.uColor,0),this._adaptor.execute(this,e)}_rebuild(e){const t=!!this._graphicsBatchesHash[e.uid],r=this.renderer.graphicsContext.updateGpuContext(e.context);t&&this._removeBatchForRenderable(e.uid),r.isBatchable&&this._initBatchesForRenderable(e),e.batched=r.isBatchable}_addToBatcher(e,t){const r=this.renderer.renderPipes.batch,a=this._getBatchesForRenderable(e);for(let i=0;i<a.length;i++){const s=a[i];r.addToBatch(s,t)}}_getBatchesForRenderable(e){return this._graphicsBatchesHash[e.uid]||this._initBatchesForRenderable(e)}_initBatchesForRenderable(e){const t=e.context,r=this.renderer.graphicsContext.getGpuContext(t),a=this.renderer._roundPixels|e._roundPixels,i=r.batches.map(s=>{const n=b.get(at);return s.copyTo(n),n.renderable=e,n.roundPixels=a,n});return this._graphicsBatchesHash[e.uid]===void 0&&e.on("destroyed",this._destroyRenderableBound),this._graphicsBatchesHash[e.uid]=i,i}_removeBatchForRenderable(e){this._graphicsBatchesHash[e].forEach(t=>{b.return(t)}),this._graphicsBatchesHash[e]=null}destroy(){this.renderer=null,this._adaptor.destroy(),this._adaptor=null,this.state=null;for(const e in this._graphicsBatchesHash)this._removeBatchForRenderable(e);this._graphicsBatchesHash=null}}ke.extension={type:[g.WebGLPipes,g.WebGPUPipes,g.CanvasPipes],name:"graphics"};const He=class ze extends ee{constructor(...e){super({});let t=e[0]??{};typeof t=="number"&&(Q(Te,"PlaneGeometry constructor changed please use { width, height, verticesX, verticesY } instead"),t={width:t,height:e[1],verticesX:e[2],verticesY:e[3]}),this.build(t)}build(e){e={...ze.defaultOptions,...e},this.verticesX=this.verticesX??e.verticesX,this.verticesY=this.verticesY??e.verticesY,this.width=this.width??e.width,this.height=this.height??e.height;const t=this.verticesX*this.verticesY,r=[],a=[],i=[],s=this.verticesX-1,n=this.verticesY-1,u=this.width/s,l=this.height/n;for(let d=0;d<t;d++){const f=d%this.verticesX,m=d/this.verticesX|0;r.push(f*u,m*l),a.push(f/s,m/n)}const c=s*n;for(let d=0;d<c;d++){const f=d%s,m=d/s|0,p=m*this.verticesX+f,h=m*this.verticesX+f+1,_=(m+1)*this.verticesX+f,x=(m+1)*this.verticesX+f+1;i.push(p,h,_,h,x,_)}this.buffers[0].data=new Float32Array(r),this.buffers[1].data=new Float32Array(a),this.indexBuffer.data=new Uint32Array(i),this.buffers[0].update(),this.buffers[1].update(),this.indexBuffer.update()}};He.defaultOptions={width:100,height:100,verticesX:10,verticesY:10};let Ct=He;class te{constructor(){this.batcherName="default",this.packAsQuad=!1,this.indexOffset=0,this.attributeOffset=0,this.roundPixels=0,this._batcher=null,this._batch=null,this._textureMatrixUpdateId=-1,this._uvUpdateId=-1}get blendMode(){return this.renderable.groupBlendMode}get topology(){return this._topology||this.geometry.topology}set topology(e){this._topology=e}reset(){this.renderable=null,this.texture=null,this._batcher=null,this._batch=null,this.geometry=null,this._uvUpdateId=-1,this._textureMatrixUpdateId=-1}setTexture(e){this.texture!==e&&(this.texture=e,this._textureMatrixUpdateId=-1)}get uvs(){const t=this.geometry.getBuffer("aUV"),r=t.data;let a=r;const i=this.texture.textureMatrix;return i.isSimple||(a=this._transformedUvs,(this._textureMatrixUpdateId!==i._updateID||this._uvUpdateId!==t._updateID)&&((!a||a.length<r.length)&&(a=this._transformedUvs=new Float32Array(r.length)),this._textureMatrixUpdateId=i._updateID,this._uvUpdateId=t._updateID,i.multiplyUvs(r,a))),a}get positions(){return this.geometry.positions}get indices(){return this.geometry.indices}get color(){return this.renderable.groupColorAlpha}get groupTransform(){return this.renderable.groupTransform}get attributeSize(){return this.geometry.positions.length/2}get indexSize(){return this.geometry.indices.length}}class Ie{constructor(e,t){this.localUniforms=new A({uTransformMatrix:{value:new P,type:"mat3x3<f32>"},uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uRound:{value:0,type:"f32"}}),this.localUniformsBindGroup=new xe({0:this.localUniforms}),this._meshDataHash=Object.create(null),this._gpuBatchableMeshHash=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this.renderer=e,this._adaptor=t,this._adaptor.init(),e.renderableGC.addManagedHash(this,"_gpuBatchableMeshHash"),e.renderableGC.addManagedHash(this,"_meshDataHash")}validateRenderable(e){const t=this._getMeshData(e),r=t.batched,a=e.batched;if(t.batched=a,r!==a)return!0;if(a){const i=e._geometry;if(i.indices.length!==t.indexSize||i.positions.length!==t.vertexSize)return t.indexSize=i.indices.length,t.vertexSize=i.positions.length,!0;const s=this._getBatchableMesh(e);return s.texture.uid!==e._texture.uid&&(s._textureMatrixUpdateId=-1),!s._batcher.checkAndUpdateTexture(s,e._texture)}return!1}addRenderable(e,t){const r=this.renderer.renderPipes.batch,{batched:a}=this._getMeshData(e);if(a){const i=this._getBatchableMesh(e);i.setTexture(e._texture),i.geometry=e._geometry,r.addToBatch(i,t)}else r.break(t),t.add(e)}updateRenderable(e){if(e.batched){const t=this._gpuBatchableMeshHash[e.uid];t.setTexture(e._texture),t.geometry=e._geometry,t._batcher.updateElement(t)}}destroyRenderable(e){this._meshDataHash[e.uid]=null;const t=this._gpuBatchableMeshHash[e.uid];t&&(b.return(t),this._gpuBatchableMeshHash[e.uid]=null),e.off("destroyed",this._destroyRenderableBound)}execute(e){if(!e.isRenderable)return;e.state.blendMode=J(e.groupBlendMode,e.texture._source);const t=this.localUniforms;t.uniforms.uTransformMatrix=e.groupTransform,t.uniforms.uRound=this.renderer._roundPixels|e._roundPixels,t.update(),V(e.groupColorAlpha,t.uniforms.uColor,0),this._adaptor.execute(this,e)}_getMeshData(e){return this._meshDataHash[e.uid]||this._initMeshData(e)}_initMeshData(e){var t,r;return this._meshDataHash[e.uid]={batched:e.batched,indexSize:(t=e._geometry.indices)==null?void 0:t.length,vertexSize:(r=e._geometry.positions)==null?void 0:r.length},e.on("destroyed",this._destroyRenderableBound),this._meshDataHash[e.uid]}_getBatchableMesh(e){return this._gpuBatchableMeshHash[e.uid]||this._initBatchableMesh(e)}_initBatchableMesh(e){const t=b.get(te);return t.renderable=e,t.setTexture(e._texture),t.transform=e.groupTransform,t.roundPixels=this.renderer._roundPixels|e._roundPixels,this._gpuBatchableMeshHash[e.uid]=t,t}destroy(){for(const e in this._gpuBatchableMeshHash)this._gpuBatchableMeshHash[e]&&b.return(this._gpuBatchableMeshHash[e]);this._gpuBatchableMeshHash=null,this._meshDataHash=null,this.localUniforms=null,this.localUniformsBindGroup=null,this._adaptor.destroy(),this._adaptor=null,this.renderer=null}}Ie.extension={type:[g.WebGLPipes,g.WebGPUPipes,g.CanvasPipes],name:"mesh"};class Pt{execute(e,t){const r=e.state,a=e.renderer,i=t.shader||e.defaultShader;i.resources.uTexture=t.texture._source,i.resources.uniforms=e.localUniforms;const s=a.gl,n=e.getBuffers(t);a.shader.bind(i),a.state.set(r),a.geometry.bind(n.geometry,i.glProgram);const l=n.geometry.indexBuffer.data.BYTES_PER_ELEMENT===2?s.UNSIGNED_SHORT:s.UNSIGNED_INT;s.drawElements(s.TRIANGLES,t.particleChildren.length*6,l,0)}}class Rt{execute(e,t){const r=e.renderer,a=t.shader||e.defaultShader;a.groups[0]=r.renderPipes.uniformBatch.getUniformBindGroup(e.localUniforms,!0),a.groups[1]=r.texture.getTextureBindGroup(t.texture);const i=e.state,s=e.getBuffers(t);r.encoder.draw({geometry:s.geometry,shader:t.shader||e.defaultShader,state:i,size:t.particleChildren.length*6})}}function ce(o,e=null){const t=o*6;if(t>65535?e||(e=new Uint32Array(t)):e||(e=new Uint16Array(t)),e.length!==t)throw new Error(`Out buffer length is incorrect, got ${e.length} and expected ${t}`);for(let r=0,a=0;r<t;r+=6,a+=4)e[r+0]=a+0,e[r+1]=a+1,e[r+2]=a+2,e[r+3]=a+0,e[r+4]=a+2,e[r+5]=a+3;return e}function Mt(o){return{dynamicUpdate:he(o,!0),staticUpdate:he(o,!1)}}function he(o,e){const t=[];t.push(`
      
        var index = 0;

        for (let i = 0; i < ps.length; ++i)
        {
            const p = ps[i];

            `);let r=0;for(const i in o){const s=o[i];if(e!==s.dynamic)continue;t.push(`offset = index + ${r}`),t.push(s.code);const n=j(s.format);r+=n.stride/4}t.push(`
            index += stride * 4;
        }
    `),t.unshift(`
        var stride = ${r};
    `);const a=t.join(`
`);return new Function("ps","f32v","u32v",a)}class Ut{constructor(e){this._size=0,this._generateParticleUpdateCache={};const t=this._size=e.size??1e3,r=e.properties;let a=0,i=0;for(const c in r){const d=r[c],f=j(d.format);d.dynamic?i+=f.stride:a+=f.stride}this._dynamicStride=i/4,this._staticStride=a/4,this.staticAttributeBuffer=new z(t*4*a),this.dynamicAttributeBuffer=new z(t*4*i),this.indexBuffer=ce(t);const s=new N;let n=0,u=0;this._staticBuffer=new k({data:new Float32Array(1),label:"static-particle-buffer",shrinkToFit:!1,usage:w.VERTEX|w.COPY_DST}),this._dynamicBuffer=new k({data:new Float32Array(1),label:"dynamic-particle-buffer",shrinkToFit:!1,usage:w.VERTEX|w.COPY_DST});for(const c in r){const d=r[c],f=j(d.format);d.dynamic?(s.addAttribute(d.attributeName,{buffer:this._dynamicBuffer,stride:this._dynamicStride*4,offset:n*4,format:d.format}),n+=f.size):(s.addAttribute(d.attributeName,{buffer:this._staticBuffer,stride:this._staticStride*4,offset:u*4,format:d.format}),u+=f.size)}s.addIndex(this.indexBuffer);const l=this.getParticleUpdate(r);this._dynamicUpload=l.dynamicUpdate,this._staticUpload=l.staticUpdate,this.geometry=s}getParticleUpdate(e){const t=Gt(e);return this._generateParticleUpdateCache[t]?this._generateParticleUpdateCache[t]:(this._generateParticleUpdateCache[t]=this.generateParticleUpdate(e),this._generateParticleUpdateCache[t])}generateParticleUpdate(e){return Mt(e)}update(e,t){e.length>this._size&&(t=!0,this._size=Math.max(e.length,this._size*1.5|0),this.staticAttributeBuffer=new z(this._size*this._staticStride*4*4),this.dynamicAttributeBuffer=new z(this._size*this._dynamicStride*4*4),this.indexBuffer=ce(this._size),this.geometry.indexBuffer.setDataWithSize(this.indexBuffer,this.indexBuffer.byteLength,!0));const r=this.dynamicAttributeBuffer;if(this._dynamicUpload(e,r.float32View,r.uint32View),this._dynamicBuffer.setDataWithSize(this.dynamicAttributeBuffer.float32View,e.length*this._dynamicStride*4,!0),t){const a=this.staticAttributeBuffer;this._staticUpload(e,a.float32View,a.uint32View),this._staticBuffer.setDataWithSize(a.float32View,e.length*this._staticStride*4,!0)}}destroy(){this._staticBuffer.destroy(),this._dynamicBuffer.destroy(),this.geometry.destroy()}}function Gt(o){const e=[];for(const t in o){const r=o[t];e.push(t,r.code,r.dynamic?"d":"s")}return e.join("_")}var Ft=`varying vec2 vUV;
varying vec4 vColor;

uniform sampler2D uTexture;

void main(void){
    vec4 color = texture2D(uTexture, vUV) * vColor;
    gl_FragColor = color;
}`,At=`attribute vec2 aVertex;
attribute vec2 aUV;
attribute vec4 aColor;

attribute vec2 aPosition;
attribute float aRotation;

uniform mat3 uTranslationMatrix;
uniform float uRound;
uniform vec2 uResolution;
uniform vec4 uColor;

varying vec2 vUV;
varying vec4 vColor;

vec2 roundPixels(vec2 position, vec2 targetSize)
{       
    return (floor(((position * 0.5 + 0.5) * targetSize) + 0.5) / targetSize) * 2.0 - 1.0;
}

void main(void){
    float cosRotation = cos(aRotation);
    float sinRotation = sin(aRotation);
    float x = aVertex.x * cosRotation - aVertex.y * sinRotation;
    float y = aVertex.x * sinRotation + aVertex.y * cosRotation;

    vec2 v = vec2(x, y);
    v = v + aPosition;

    gl_Position = vec4((uTranslationMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);

    if(uRound == 1.0)
    {
        gl_Position.xy = roundPixels(gl_Position.xy, uResolution);
    }

    vUV = aUV;
    vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uColor;
}
`,fe=`
struct ParticleUniforms {
  uProjectionMatrix:mat3x3<f32>,
  uColor:vec4<f32>,
  uResolution:vec2<f32>,
  uRoundPixels:f32,
};

@group(0) @binding(0) var<uniform> uniforms: ParticleUniforms;

@group(1) @binding(0) var uTexture: texture_2d<f32>;
@group(1) @binding(1) var uSampler : sampler;

struct VSOutput {
    @builtin(position) position: vec4<f32>,
    @location(0) uv : vec2<f32>,
    @location(1) color : vec4<f32>,
  };
@vertex
fn mainVertex(
  @location(0) aVertex: vec2<f32>,
  @location(1) aPosition: vec2<f32>,
  @location(2) aUV: vec2<f32>,
  @location(3) aColor: vec4<f32>,
  @location(4) aRotation: f32,
) -> VSOutput {
  
   let v = vec2(
       aVertex.x * cos(aRotation) - aVertex.y * sin(aRotation),
       aVertex.x * sin(aRotation) + aVertex.y * cos(aRotation)
   ) + aPosition;

   let position = vec4((uniforms.uProjectionMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);

    let vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uniforms.uColor;

  return VSOutput(
   position,
   aUV,
   vColor,
  );
}

@fragment
fn mainFragment(
  @location(0) uv: vec2<f32>,
  @location(1) color: vec4<f32>,
  @builtin(position) position: vec4<f32>,
) -> @location(0) vec4<f32> {

    var sample = textureSample(uTexture, uSampler, uv) * color;
   
    return sample;
}`;class Dt extends Z{constructor(){const e=st.from({vertex:At,fragment:Ft}),t=it.from({fragment:{source:fe,entryPoint:"mainFragment"},vertex:{source:fe,entryPoint:"mainVertex"}});super({glProgram:e,gpuProgram:t,resources:{uTexture:G.WHITE.source,uSampler:new nt({}),uniforms:{uTranslationMatrix:{value:new P,type:"mat3x3<f32>"},uColor:{value:new ve(16777215),type:"vec4<f32>"},uRound:{value:1,type:"f32"},uResolution:{value:[0,0],type:"vec2<f32>"}}}})}}class We{constructor(e,t){this.state=O.for2d(),this._gpuBufferHash=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this.localUniforms=new A({uTranslationMatrix:{value:new P,type:"mat3x3<f32>"},uColor:{value:new Float32Array(4),type:"vec4<f32>"},uRound:{value:1,type:"f32"},uResolution:{value:[0,0],type:"vec2<f32>"}}),this.renderer=e,this.adaptor=t,this.defaultShader=new Dt,this.state=O.for2d()}validateRenderable(e){return!1}addRenderable(e,t){this.renderer.renderPipes.batch.break(t),t.add(e)}getBuffers(e){return this._gpuBufferHash[e.uid]||this._initBuffer(e)}_initBuffer(e){return this._gpuBufferHash[e.uid]=new Ut({size:e.particleChildren.length,properties:e._properties}),e.on("destroyed",this._destroyRenderableBound),this._gpuBufferHash[e.uid]}updateRenderable(e){}destroyRenderable(e){this._gpuBufferHash[e.uid].destroy(),this._gpuBufferHash[e.uid]=null,e.off("destroyed",this._destroyRenderableBound)}execute(e){const t=e.particleChildren;if(t.length===0)return;const r=this.renderer,a=this.getBuffers(e);e.texture||(e.texture=t[0].texture);const i=this.state;a.update(t,e._childrenDirty),e._childrenDirty=!1,i.blendMode=J(e.blendMode,e.texture._source);const s=this.localUniforms.uniforms,n=s.uTranslationMatrix;e.worldTransform.copyTo(n),n.prepend(r.globalUniforms.globalUniformData.projectionMatrix),s.uResolution=r.globalUniforms.globalUniformData.resolution,s.uRound=r._roundPixels|e._roundPixels,V(e.groupColorAlpha,s.uColor,0),this.adaptor.execute(this,e)}destroy(){this.defaultShader&&(this.defaultShader.destroy(),this.defaultShader=null)}}class Oe extends We{constructor(e){super(e,new Pt)}}Oe.extension={type:[g.WebGLPipes],name:"particle"};class Ve extends We{constructor(e){super(e,new Rt)}}Ve.extension={type:[g.WebGPUPipes],name:"particle"};const Ee=class Le extends Ct{constructor(e={}){e={...Le.defaultOptions,...e},super({width:e.width,height:e.height,verticesX:4,verticesY:4}),this.update(e)}update(e){var t,r;this.width=e.width??this.width,this.height=e.height??this.height,this._originalWidth=e.originalWidth??this._originalWidth,this._originalHeight=e.originalHeight??this._originalHeight,this._leftWidth=e.leftWidth??this._leftWidth,this._rightWidth=e.rightWidth??this._rightWidth,this._topHeight=e.topHeight??this._topHeight,this._bottomHeight=e.bottomHeight??this._bottomHeight,this._anchorX=(t=e.anchor)==null?void 0:t.x,this._anchorY=(r=e.anchor)==null?void 0:r.y,this.updateUvs(),this.updatePositions()}updatePositions(){const e=this.positions,{width:t,height:r,_leftWidth:a,_rightWidth:i,_topHeight:s,_bottomHeight:n,_anchorX:u,_anchorY:l}=this,c=a+i,d=t>c?1:t/c,f=s+n,m=r>f?1:r/f,p=Math.min(d,m),h=u*t,_=l*r;e[0]=e[8]=e[16]=e[24]=-h,e[2]=e[10]=e[18]=e[26]=a*p-h,e[4]=e[12]=e[20]=e[28]=t-i*p-h,e[6]=e[14]=e[22]=e[30]=t-h,e[1]=e[3]=e[5]=e[7]=-_,e[9]=e[11]=e[13]=e[15]=s*p-_,e[17]=e[19]=e[21]=e[23]=r-n*p-_,e[25]=e[27]=e[29]=e[31]=r-_,this.getBuffer("aPosition").update()}updateUvs(){const e=this.uvs;e[0]=e[8]=e[16]=e[24]=0,e[1]=e[3]=e[5]=e[7]=0,e[6]=e[14]=e[22]=e[30]=1,e[25]=e[27]=e[29]=e[31]=1;const t=1/this._originalWidth,r=1/this._originalHeight;e[2]=e[10]=e[18]=e[26]=t*this._leftWidth,e[9]=e[11]=e[13]=e[15]=r*this._topHeight,e[4]=e[12]=e[20]=e[28]=1-t*this._rightWidth,e[17]=e[19]=e[21]=e[23]=1-r*this._bottomHeight,this.getBuffer("aUV").update()}};Ee.defaultOptions={width:100,height:100,leftWidth:10,topHeight:10,rightWidth:10,bottomHeight:10,originalWidth:100,originalHeight:100};let kt=Ee;class Ye{constructor(e){this._gpuSpriteHash=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=e,this._renderer.renderableGC.addManagedHash(this,"_gpuSpriteHash")}addRenderable(e,t){const r=this._getGpuSprite(e);e.didViewUpdate&&this._updateBatchableSprite(e,r),this._renderer.renderPipes.batch.addToBatch(r,t)}updateRenderable(e){const t=this._gpuSpriteHash[e.uid];e.didViewUpdate&&this._updateBatchableSprite(e,t),t._batcher.updateElement(t)}validateRenderable(e){const t=this._getGpuSprite(e);return!t._batcher.checkAndUpdateTexture(t,e._texture)}destroyRenderable(e){const t=this._gpuSpriteHash[e.uid];b.return(t.geometry),b.return(t),this._gpuSpriteHash[e.uid]=null,e.off("destroyed",this._destroyRenderableBound)}_updateBatchableSprite(e,t){t.geometry.update(e),t.setTexture(e._texture)}_getGpuSprite(e){return this._gpuSpriteHash[e.uid]||this._initGPUSprite(e)}_initGPUSprite(e){const t=b.get(te);return t.geometry=b.get(kt),t.renderable=e,t.transform=e.groupTransform,t.texture=e._texture,t.roundPixels=this._renderer._roundPixels|e._roundPixels,this._gpuSpriteHash[e.uid]=t,e.didViewUpdate||this._updateBatchableSprite(e,t),e.on("destroyed",this._destroyRenderableBound),t}destroy(){for(const e in this._gpuSpriteHash)this._gpuSpriteHash[e].geometry.destroy();this._gpuSpriteHash=null,this._renderer=null}}Ye.extension={type:[g.WebGLPipes,g.WebGPUPipes,g.CanvasPipes],name:"nineSliceSprite"};const Ht={name:"tiling-bit",vertex:{header:`
            struct TilingUniforms {
                uMapCoord:mat3x3<f32>,
                uClampFrame:vec4<f32>,
                uClampOffset:vec2<f32>,
                uTextureTransform:mat3x3<f32>,
                uSizeAnchor:vec4<f32>
            };

            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;
            @group(2) @binding(1) var uTexture: texture_2d<f32>;
            @group(2) @binding(2) var uSampler: sampler;
        `,main:`
            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;

            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;
        `},fragment:{header:`
            struct TilingUniforms {
                uMapCoord:mat3x3<f32>,
                uClampFrame:vec4<f32>,
                uClampOffset:vec2<f32>,
                uTextureTransform:mat3x3<f32>,
                uSizeAnchor:vec4<f32>
            };

            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;
            @group(2) @binding(1) var uTexture: texture_2d<f32>;
            @group(2) @binding(2) var uSampler: sampler;
        `,main:`

            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);
            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;
            var unclamped = coord;
            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);

            var bias = 0.;

            if(unclamped.x == coord.x && unclamped.y == coord.y)
            {
                bias = -32.;
            } 

            outColor = textureSampleBias(uTexture, uSampler, coord, bias);
        `}},zt={name:"tiling-bit",vertex:{header:`
            uniform mat3 uTextureTransform;
            uniform vec4 uSizeAnchor;
        
        `,main:`
            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;

            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;
        `},fragment:{header:`
            uniform sampler2D uTexture;
            uniform mat3 uMapCoord;
            uniform vec4 uClampFrame;
            uniform vec2 uClampOffset;
        `,main:`

        vec2 coord = vUV + ceil(uClampOffset - vUV);
        coord = (uMapCoord * vec3(coord, 1.0)).xy;
        vec2 unclamped = coord;
        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);
        
        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0
    
        `}};let E,L;class It extends Z{constructor(){E??(E=Se({name:"tiling-sprite-shader",bits:[vt,Ht,Be]})),L??(L=we({name:"tiling-sprite-shader",bits:[St,zt,Ce]}));const e=new A({uMapCoord:{value:new P,type:"mat3x3<f32>"},uClampFrame:{value:new Float32Array([0,0,1,1]),type:"vec4<f32>"},uClampOffset:{value:new Float32Array([0,0]),type:"vec2<f32>"},uTextureTransform:{value:new P,type:"mat3x3<f32>"},uSizeAnchor:{value:new Float32Array([100,100,.5,.5]),type:"vec4<f32>"}});super({glProgram:L,gpuProgram:E,resources:{localUniforms:new A({uTransformMatrix:{value:new P,type:"mat3x3<f32>"},uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uRound:{value:0,type:"f32"}}),tilingUniforms:e,uTexture:G.EMPTY.source,uSampler:G.EMPTY.source.style}})}updateUniforms(e,t,r,a,i,s){const n=this.resources.tilingUniforms,u=s.width,l=s.height,c=s.textureMatrix,d=n.uniforms.uTextureTransform;d.set(r.a*u/e,r.b*u/t,r.c*l/e,r.d*l/t,r.tx/e,r.ty/t),d.invert(),n.uniforms.uMapCoord=c.mapCoord,n.uniforms.uClampFrame=c.uClampFrame,n.uniforms.uClampOffset=c.uClampOffset,n.uniforms.uTextureTransform=d,n.uniforms.uSizeAnchor[0]=e,n.uniforms.uSizeAnchor[1]=t,n.uniforms.uSizeAnchor[2]=a,n.uniforms.uSizeAnchor[3]=i,s&&(this.resources.uTexture=s.source,this.resources.uSampler=s.source.style)}}class Wt extends ee{constructor(){super({positions:new Float32Array([0,0,1,0,1,1,0,1]),uvs:new Float32Array([0,0,1,0,1,1,0,1]),indices:new Uint32Array([0,1,2,0,2,3])})}}function Ot(o,e){const t=o.anchor.x,r=o.anchor.y;e[0]=-t*o.width,e[1]=-r*o.height,e[2]=(1-t)*o.width,e[3]=-r*o.height,e[4]=(1-t)*o.width,e[5]=(1-r)*o.height,e[6]=-t*o.width,e[7]=(1-r)*o.height}function Vt(o,e,t,r){let a=0;const i=o.length/e,s=r.a,n=r.b,u=r.c,l=r.d,c=r.tx,d=r.ty;for(t*=e;a<i;){const f=o[t],m=o[t+1];o[t]=s*f+u*m+c,o[t+1]=n*f+l*m+d,t+=e,a++}}function Et(o,e){const t=o.texture,r=t.frame.width,a=t.frame.height;let i=0,s=0;o.applyAnchorToTexture&&(i=o.anchor.x,s=o.anchor.y),e[0]=e[6]=-i,e[2]=e[4]=1-i,e[1]=e[3]=-s,e[5]=e[7]=1-s;const n=P.shared;n.copyFrom(o._tileTransform.matrix),n.tx/=o.width,n.ty/=o.height,n.invert(),n.scale(o.width/r,o.height/a),Vt(e,2,0,n)}const I=new Wt;class Xe{constructor(e){this._state=O.default2d,this._tilingSpriteDataHash=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=e,this._renderer.renderableGC.addManagedHash(this,"_tilingSpriteDataHash")}validateRenderable(e){const t=this._getTilingSpriteData(e),r=t.canBatch;this._updateCanBatch(e);const a=t.canBatch;if(a&&a===r){const{batchableMesh:i}=t;return!i._batcher.checkAndUpdateTexture(i,e.texture)}return r!==a}addRenderable(e,t){const r=this._renderer.renderPipes.batch;this._updateCanBatch(e);const a=this._getTilingSpriteData(e),{geometry:i,canBatch:s}=a;if(s){a.batchableMesh||(a.batchableMesh=new te);const n=a.batchableMesh;e.didViewUpdate&&(this._updateBatchableMesh(e),n.geometry=i,n.renderable=e,n.transform=e.groupTransform,n.setTexture(e._texture)),n.roundPixels=this._renderer._roundPixels|e._roundPixels,r.addToBatch(n,t)}else r.break(t),a.shader||(a.shader=new It),this.updateRenderable(e),t.add(e)}execute(e){const{shader:t}=this._tilingSpriteDataHash[e.uid];t.groups[0]=this._renderer.globalUniforms.bindGroup;const r=t.resources.localUniforms.uniforms;r.uTransformMatrix=e.groupTransform,r.uRound=this._renderer._roundPixels|e._roundPixels,V(e.groupColorAlpha,r.uColor,0),this._state.blendMode=J(e.groupBlendMode,e.texture._source),this._renderer.encoder.draw({geometry:I,shader:t,state:this._state})}updateRenderable(e){const t=this._getTilingSpriteData(e),{canBatch:r}=t;if(r){const{batchableMesh:a}=t;e.didViewUpdate&&this._updateBatchableMesh(e),a._batcher.updateElement(a)}else if(e.didViewUpdate){const{shader:a}=t;a.updateUniforms(e.width,e.height,e._tileTransform.matrix,e.anchor.x,e.anchor.y,e.texture)}}destroyRenderable(e){var r;const t=this._getTilingSpriteData(e);t.batchableMesh=null,(r=t.shader)==null||r.destroy(),this._tilingSpriteDataHash[e.uid]=null,e.off("destroyed",this._destroyRenderableBound)}_getTilingSpriteData(e){return this._tilingSpriteDataHash[e.uid]||this._initTilingSpriteData(e)}_initTilingSpriteData(e){const t=new ee({indices:I.indices,positions:I.positions.slice(),uvs:I.uvs.slice()});return this._tilingSpriteDataHash[e.uid]={canBatch:!0,renderable:e,geometry:t},e.on("destroyed",this._destroyRenderableBound),this._tilingSpriteDataHash[e.uid]}_updateBatchableMesh(e){const t=this._getTilingSpriteData(e),{geometry:r}=t,a=e.texture.source.style;a.addressMode!=="repeat"&&(a.addressMode="repeat",a.update()),Et(e,r.uvs),Ot(e,r.positions)}destroy(){for(const e in this._tilingSpriteDataHash)this.destroyRenderable(this._tilingSpriteDataHash[e].renderable);this._tilingSpriteDataHash=null,this._renderer=null}_updateCanBatch(e){const t=this._getTilingSpriteData(e),r=e.texture;let a=!0;return this._renderer.type===$.WEBGL&&(a=this._renderer.context.supports.nonPowOf2wrapping),t.canBatch=r.textureMatrix.isSimple&&(a||r.source.isPowerOfTwo),t.canBatch}}Xe.extension={type:[g.WebGLPipes,g.WebGPUPipes,g.CanvasPipes],name:"tilingSprite"};const Lt={name:"local-uniform-msdf-bit",vertex:{header:`
            struct LocalUniforms {
                uColor:vec4<f32>,
                uTransformMatrix:mat3x3<f32>,
                uDistance: f32,
                uRound:f32,
            }

            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;
        `,main:`
            vColor *= localUniforms.uColor;
            modelMatrix *= localUniforms.uTransformMatrix;
        `,end:`
            if(localUniforms.uRound == 1)
            {
                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);
            }
        `},fragment:{header:`
            struct LocalUniforms {
                uColor:vec4<f32>,
                uTransformMatrix:mat3x3<f32>,
                uDistance: f32
            }

            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;
         `,main:` 
            outColor = vec4<f32>(calculateMSDFAlpha(outColor, localUniforms.uColor, localUniforms.uDistance));
        `}},Yt={name:"local-uniform-msdf-bit",vertex:{header:`
            uniform mat3 uTransformMatrix;
            uniform vec4 uColor;
            uniform float uRound;
        `,main:`
            vColor *= uColor;
            modelMatrix *= uTransformMatrix;
        `,end:`
            if(uRound == 1.)
            {
                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);
            }
        `},fragment:{header:`
            uniform float uDistance;
         `,main:` 
            outColor = vec4(calculateMSDFAlpha(outColor, vColor, uDistance));
        `}},Xt={name:"msdf-bit",fragment:{header:`
            fn calculateMSDFAlpha(msdfColor:vec4<f32>, shapeColor:vec4<f32>, distance:f32) -> f32 {
                
                // MSDF
                var median = msdfColor.r + msdfColor.g + msdfColor.b -
                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -
                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));
            
                // SDF
                median = min(median, msdfColor.a);

                var screenPxDistance = distance * (median - 0.5);
                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);
                if (median < 0.01) {
                    alpha = 0.0;
                } else if (median > 0.99) {
                    alpha = 1.0;
                }

                // Gamma correction for coverage-like alpha
                var luma: f32 = dot(shapeColor.rgb, vec3<f32>(0.299, 0.587, 0.114));
                var gamma: f32 = mix(1.0, 1.0 / 2.2, luma);
                var coverage: f32 = pow(shapeColor.a * alpha, gamma);

                return coverage;
             
            }
        `}},jt={name:"msdf-bit",fragment:{header:`
            float calculateMSDFAlpha(vec4 msdfColor, vec4 shapeColor, float distance) {
                
                // MSDF
                float median = msdfColor.r + msdfColor.g + msdfColor.b -
                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -
                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));
               
                // SDF
                median = min(median, msdfColor.a);
            
                float screenPxDistance = distance * (median - 0.5);
                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);
           
                if (median < 0.01) {
                    alpha = 0.0;
                } else if (median > 0.99) {
                    alpha = 1.0;
                }

                // Gamma correction for coverage-like alpha
                float luma = dot(shapeColor.rgb, vec3(0.299, 0.587, 0.114));
                float gamma = mix(1.0, 1.0 / 2.2, luma);
                float coverage = pow(shapeColor.a * alpha, gamma);  
              
                return coverage;
            }
        `}};let Y,X;class Kt extends Z{constructor(){const e=new A({uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uTransformMatrix:{value:new P,type:"mat3x3<f32>"},uDistance:{value:4,type:"f32"},uRound:{value:0,type:"f32"}}),t=ot();Y??(Y=Se({name:"sdf-shader",bits:[ut,dt(t),Lt,Xt,Be]})),X??(X=we({name:"sdf-shader",bits:[lt,ct(t),Yt,jt,Ce]})),super({glProgram:X,gpuProgram:Y,resources:{localUniforms:e,batchSamplers:ht(t)}})}}class je{constructor(e){this._gpuBitmapText={},this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=e,this._renderer.renderableGC.addManagedHash(this,"_gpuBitmapText")}validateRenderable(e){const t=this._getGpuBitmapText(e);return e._didTextUpdate&&(e._didTextUpdate=!1,this._updateContext(e,t)),this._renderer.renderPipes.graphics.validateRenderable(t)}addRenderable(e,t){const r=this._getGpuBitmapText(e);pe(e,r),e._didTextUpdate&&(e._didTextUpdate=!1,this._updateContext(e,r)),this._renderer.renderPipes.graphics.addRenderable(r,t),r.context.customShader&&this._updateDistanceField(e)}destroyRenderable(e){e.off("destroyed",this._destroyRenderableBound),this._destroyRenderableByUid(e.uid)}_destroyRenderableByUid(e){const t=this._gpuBitmapText[e].context;t.customShader&&(b.return(t.customShader),t.customShader=null),b.return(this._gpuBitmapText[e]),this._gpuBitmapText[e]=null}updateRenderable(e){const t=this._getGpuBitmapText(e);pe(e,t),this._renderer.renderPipes.graphics.updateRenderable(t),t.context.customShader&&this._updateDistanceField(e)}_updateContext(e,t){const{context:r}=t,a=ft.getFont(e.text,e._style);r.clear(),a.distanceField.type!=="none"&&(r.customShader||(r.customShader=b.get(Kt)));const i=Array.from(e.text),s=e._style;let n=a.baseLineOffset;const u=pt(i,s,a,!0);let l=0;const c=s.padding,d=u.scale;let f=u.width,m=u.height+u.offsetY;s._stroke&&(f+=s._stroke.width/d,m+=s._stroke.width/d),r.translate(-e._anchor._x*f-c,-e._anchor._y*m-c).scale(d,d);const p=a.applyFillAsTint?s._fill.color:16777215;for(let h=0;h<u.lines.length;h++){const _=u.lines[h];for(let x=0;x<_.charPositions.length;x++){const C=i[l++],v=a.chars[C];v!=null&&v.texture&&r.texture(v.texture,p||"black",Math.round(_.charPositions[x]+v.xOffset),Math.round(n+v.yOffset))}n+=a.lineHeight}}_getGpuBitmapText(e){return this._gpuBitmapText[e.uid]||this.initGpuText(e)}initGpuText(e){const t=b.get(gt);return this._gpuBitmapText[e.uid]=t,this._updateContext(e,t),e.on("destroyed",this._destroyRenderableBound),this._gpuBitmapText[e.uid]}_updateDistanceField(e){const t=this._getGpuBitmapText(e).context,r=e._style.fontFamily,a=K.get(`${r}-bitmap`),{a:i,b:s,c:n,d:u}=e.groupTransform,l=Math.sqrt(i*i+s*s),c=Math.sqrt(n*n+u*u),d=(Math.abs(l)+Math.abs(c))/2,f=a.baseRenderedFontSize/e._style.fontSize,m=d*a.distanceField.range*(1/f);t.customShader.resources.localUniforms.uniforms.uDistance=m}destroy(){for(const e in this._gpuBitmapText)this._destroyRenderableByUid(e);this._gpuBitmapText=null,this._renderer=null}}je.extension={type:[g.WebGLPipes,g.WebGPUPipes,g.CanvasPipes],name:"bitmapText"};function pe(o,e){e.groupTransform=o.groupTransform,e.groupColorAlpha=o.groupColorAlpha,e.groupColor=o.groupColor,e.groupBlendMode=o.groupBlendMode,e.globalDisplayStatus=o.globalDisplayStatus,e.groupTransform=o.groupTransform,e.localDisplayStatus=o.localDisplayStatus,e.groupAlpha=o.groupAlpha,e._roundPixels=o._roundPixels}function q(o,e){const{texture:t,bounds:r}=o;mt(r,e._anchor,t);const a=e._style.padding;r.minX-=a,r.minY-=a,r.maxX-=a,r.maxY-=a}class Ke{constructor(e){this._gpuText=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=e,this._renderer.runners.resolutionChange.add(this),this._renderer.renderableGC.addManagedHash(this,"_gpuText")}resolutionChange(){for(const e in this._gpuText){const t=this._gpuText[e];if(!t)continue;const r=t.batchableSprite.renderable;r._autoResolution&&(r._resolution=this._renderer.resolution,r.onViewUpdate())}}validateRenderable(e){const t=this._getGpuText(e),r=e._getKey();return t.textureNeedsUploading?(t.textureNeedsUploading=!1,!0):t.currentKey!==r}addRenderable(e,t){const a=this._getGpuText(e).batchableSprite;e._didTextUpdate&&this._updateText(e),this._renderer.renderPipes.batch.addToBatch(a,t)}updateRenderable(e){const r=this._getGpuText(e).batchableSprite;e._didTextUpdate&&this._updateText(e),r._batcher.updateElement(r)}destroyRenderable(e){e.off("destroyed",this._destroyRenderableBound),this._destroyRenderableById(e.uid)}_destroyRenderableById(e){const t=this._gpuText[e];this._renderer.htmlText.decreaseReferenceCount(t.currentKey),b.return(t.batchableSprite),this._gpuText[e]=null}_updateText(e){const t=e._getKey(),r=this._getGpuText(e),a=r.batchableSprite;r.currentKey!==t&&this._updateGpuText(e).catch(i=>{console.error(i)}),e._didTextUpdate=!1,q(a,e)}async _updateGpuText(e){e._didTextUpdate=!1;const t=this._getGpuText(e);if(t.generatingTexture)return;const r=e._getKey();this._renderer.htmlText.decreaseReferenceCount(t.currentKey),t.generatingTexture=!0,t.currentKey=r;const a=e.resolution??this._renderer.resolution,i=await this._renderer.htmlText.getManagedTexture(e.text,a,e._style,e._getKey()),s=t.batchableSprite;s.texture=t.texture=i,t.generatingTexture=!1,t.textureNeedsUploading=!0,e.onViewUpdate(),q(s,e)}_getGpuText(e){return this._gpuText[e.uid]||this.initGpuText(e)}initGpuText(e){const t={texture:G.EMPTY,currentKey:"--",batchableSprite:b.get(Re),textureNeedsUploading:!1,generatingTexture:!1},r=t.batchableSprite;return r.renderable=e,r.transform=e.groupTransform,r.texture=G.EMPTY,r.bounds={minX:0,maxX:1,minY:0,maxY:0},r.roundPixels=this._renderer._roundPixels|e._roundPixels,e._resolution=e._autoResolution?this._renderer.resolution:e.resolution,this._gpuText[e.uid]=t,e.on("destroyed",this._destroyRenderableBound),t}destroy(){for(const e in this._gpuText)this._destroyRenderableById(e);this._gpuText=null,this._renderer=null}}Ke.extension={type:[g.WebGLPipes,g.WebGPUPipes,g.CanvasPipes],name:"htmlText"};function qt(){const{userAgent:o}=Pe.get().getNavigator();return/^((?!chrome|android).)*safari/i.test(o)}const Nt=new ye;function qe(o,e,t,r){const a=Nt;a.minX=0,a.minY=0,a.maxX=o.width/r|0,a.maxY=o.height/r|0;const i=B.getOptimalTexture(a.width,a.height,r,!1);return i.source.uploadMethodId="image",i.source.resource=o,i.source.alphaMode="premultiply-alpha-on-upload",i.frame.width=e/r,i.frame.height=t/r,i.source.emit("update",i.source),i.updateUvs(),i}function $t(o,e){const t=e.fontFamily,r=[],a={},i=/font-family:([^;"\s]+)/g,s=o.match(i);function n(u){a[u]||(r.push(u),a[u]=!0)}if(Array.isArray(t))for(let u=0;u<t.length;u++)n(t[u]);else n(t);s&&s.forEach(u=>{const l=u.split(":")[1].trim();n(l)});for(const u in e.tagStyles){const l=e.tagStyles[u].fontFamily;n(l)}return r}async function Qt(o){const t=await(await Pe.get().fetch(o)).blob(),r=new FileReader;return await new Promise((i,s)=>{r.onloadend=()=>i(r.result),r.onerror=s,r.readAsDataURL(t)})}async function ge(o,e){const t=await Qt(e);return`@font-face {
        font-family: "${o.fontFamily}";
        src: url('${t}');
        font-weight: ${o.fontWeight};
        font-style: ${o.fontStyle};
    }`}const W=new Map;async function Jt(o,e,t){const r=o.filter(a=>K.has(`${a}-and-url`)).map((a,i)=>{if(!W.has(a)){const{url:s}=K.get(`${a}-and-url`);i===0?W.set(a,ge({fontWeight:e.fontWeight,fontStyle:e.fontStyle,fontFamily:a},s)):W.set(a,ge({fontWeight:t.fontWeight,fontStyle:t.fontStyle,fontFamily:a},s))}return W.get(a)});return(await Promise.all(r)).join(`
`)}function Zt(o,e,t,r,a){const{domElement:i,styleElement:s,svgRoot:n}=a;i.innerHTML=`<style>${e.cssStyle}</style><div style='padding:0;'>${o}</div>`,i.setAttribute("style",`transform: scale(${t});transform-origin: top left; display: inline-block`),s.textContent=r;const{width:u,height:l}=a.image;return n.setAttribute("width",u.toString()),n.setAttribute("height",l.toString()),new XMLSerializer().serializeToString(n)}function er(o,e){const t=H.getOptimalCanvasAndContext(o.width,o.height,e),{context:r}=t;return r.clearRect(0,0,o.width,o.height),r.drawImage(o,0,0),t}function tr(o,e,t){return new Promise(async r=>{t&&await new Promise(a=>setTimeout(a,100)),o.onload=()=>{r()},o.src=`data:image/svg+xml;charset=utf8,${encodeURIComponent(e)}`,o.crossOrigin="anonymous"})}class re{constructor(e){this._activeTextures={},this._renderer=e,this._createCanvas=e.type===$.WEBGPU}getTexture(e){return this._buildTexturePromise(e.text,e.resolution,e.style)}getManagedTexture(e,t,r,a){if(this._activeTextures[a])return this._increaseReferenceCount(a),this._activeTextures[a].promise;const i=this._buildTexturePromise(e,t,r).then(s=>(this._activeTextures[a].texture=s,s));return this._activeTextures[a]={texture:null,promise:i,usageCount:1},i}async _buildTexturePromise(e,t,r){const a=b.get(_t),i=$t(e,r),s=await Jt(i,r,xt.defaultTextStyle),n=bt(e,r,s,a),u=Math.ceil(Math.ceil(Math.max(1,n.width)+r.padding*2)*t),l=Math.ceil(Math.ceil(Math.max(1,n.height)+r.padding*2)*t),c=a.image,d=2;c.width=(u|0)+d,c.height=(l|0)+d;const f=Zt(e,r,t,s,a);await tr(c,f,qt()&&i.length>0);const m=c;let p;this._createCanvas&&(p=er(c,t));const h=qe(p?p.canvas:m,c.width-d,c.height-d,t);return this._createCanvas&&(this._renderer.texture.initSource(h.source),H.returnCanvasAndContext(p)),b.return(a),h}_increaseReferenceCount(e){this._activeTextures[e].usageCount++}decreaseReferenceCount(e){const t=this._activeTextures[e];t&&(t.usageCount--,t.usageCount===0&&(t.texture?this._cleanUp(t):t.promise.then(r=>{t.texture=r,this._cleanUp(t)}).catch(()=>{be("HTMLTextSystem: Failed to clean texture")}),this._activeTextures[e]=null))}_cleanUp(e){B.returnTexture(e.texture),e.texture.source.resource=null,e.texture.source.uploadMethodId="unknown"}getReferenceCount(e){return this._activeTextures[e].usageCount}destroy(){this._activeTextures=null}}re.extension={type:[g.WebGLSystem,g.WebGPUSystem,g.CanvasSystem],name:"htmlText"};re.defaultFontOptions={fontFamily:"Arial",fontStyle:"normal",fontWeight:"normal"};class Ne{constructor(e){this._gpuText=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=e,this._renderer.runners.resolutionChange.add(this),this._renderer.renderableGC.addManagedHash(this,"_gpuText")}resolutionChange(){for(const e in this._gpuText){const t=this._gpuText[e];if(!t)continue;const r=t.batchableSprite.renderable;r._autoResolution&&(r._resolution=this._renderer.resolution,r.onViewUpdate())}}validateRenderable(e){const t=this._getGpuText(e),r=e._getKey();return t.currentKey!==r}addRenderable(e,t){const a=this._getGpuText(e).batchableSprite;e._didTextUpdate&&this._updateText(e),this._renderer.renderPipes.batch.addToBatch(a,t)}updateRenderable(e){const r=this._getGpuText(e).batchableSprite;e._didTextUpdate&&this._updateText(e),r._batcher.updateElement(r)}destroyRenderable(e){e.off("destroyed",this._destroyRenderableBound),this._destroyRenderableById(e.uid)}_destroyRenderableById(e){const t=this._gpuText[e];this._renderer.canvasText.decreaseReferenceCount(t.currentKey),b.return(t.batchableSprite),this._gpuText[e]=null}_updateText(e){const t=e._getKey(),r=this._getGpuText(e),a=r.batchableSprite;r.currentKey!==t&&this._updateGpuText(e),e._didTextUpdate=!1,q(a,e)}_updateGpuText(e){const t=this._getGpuText(e),r=t.batchableSprite;t.texture&&this._renderer.canvasText.decreaseReferenceCount(t.currentKey),t.texture=r.texture=this._renderer.canvasText.getManagedTexture(e),t.currentKey=e._getKey(),r.texture=t.texture}_getGpuText(e){return this._gpuText[e.uid]||this.initGpuText(e)}initGpuText(e){const t={texture:null,currentKey:"--",batchableSprite:b.get(Re)};return t.batchableSprite.renderable=e,t.batchableSprite.transform=e.groupTransform,t.batchableSprite.bounds={minX:0,maxX:1,minY:0,maxY:0},t.batchableSprite.roundPixels=this._renderer._roundPixels|e._roundPixels,this._gpuText[e.uid]=t,e._resolution=e._autoResolution?this._renderer.resolution:e.resolution,this._updateText(e),e.on("destroyed",this._destroyRenderableBound),t}destroy(){for(const e in this._gpuText)this._destroyRenderableById(e);this._gpuText=null,this._renderer=null}}Ne.extension={type:[g.WebGLPipes,g.WebGPUPipes,g.CanvasPipes],name:"text"};function me(o,e,t){for(let r=0,a=4*t*e;r<e;++r,a+=4)if(o[a+3]!==0)return!1;return!0}function _e(o,e,t,r,a){const i=4*e;for(let s=r,n=r*i+4*t;s<=a;++s,n+=i)if(o[n+3]!==0)return!1;return!0}function rr(o,e=1){const{width:t,height:r}=o,a=o.getContext("2d",{willReadFrequently:!0});if(a===null)throw new TypeError("Failed to get canvas 2D context");const s=a.getImageData(0,0,t,r).data;let n=0,u=0,l=t-1,c=r-1;for(;u<r&&me(s,t,u);)++u;if(u===r)return oe.EMPTY;for(;me(s,t,c);)--c;for(;_e(s,t,n,u,c);)++n;for(;_e(s,t,l,u,c);)--l;return++l,++c,new oe(n/e,u/e,(l-n)/e,(c-u)/e)}class $e{constructor(e){this._activeTextures={},this._renderer=e}getTextureSize(e,t,r){const a=F.measureText(e||" ",r);let i=Math.ceil(Math.ceil(Math.max(1,a.width)+r.padding*2)*t),s=Math.ceil(Math.ceil(Math.max(1,a.height)+r.padding*2)*t);return i=Math.ceil(i-1e-6),s=Math.ceil(s-1e-6),i=ue(i),s=ue(s),{width:i,height:s}}getTexture(e,t,r,a){typeof e=="string"&&(Q("8.0.0","CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments"),e={text:e,style:r,resolution:t}),e.style instanceof de||(e.style=new de(e.style));const{texture:i,canvasAndContext:s}=this.createTextureAndCanvas(e);return this._renderer.texture.initSource(i._source),H.returnCanvasAndContext(s),i}createTextureAndCanvas(e){const{text:t,style:r}=e,a=e.resolution??this._renderer.resolution,i=F.measureText(t||" ",r),s=Math.ceil(Math.ceil(Math.max(1,i.width)+r.padding*2)*a),n=Math.ceil(Math.ceil(Math.max(1,i.height)+r.padding*2)*a),u=H.getOptimalCanvasAndContext(s,n),{canvas:l}=u;this.renderTextToCanvas(t,r,a,u);const c=qe(l,s,n,a);if(r.trim){const d=rr(l,a);c.frame.copyFrom(d),c.updateUvs()}return{texture:c,canvasAndContext:u}}getManagedTexture(e){e._resolution=e._autoResolution?this._renderer.resolution:e.resolution;const t=e._getKey();if(this._activeTextures[t])return this._increaseReferenceCount(t),this._activeTextures[t].texture;const{texture:r,canvasAndContext:a}=this.createTextureAndCanvas(e);return this._activeTextures[t]={canvasAndContext:a,texture:r,usageCount:1},r}_increaseReferenceCount(e){this._activeTextures[e].usageCount++}returnTexture(e){const t=e.source;t.resource=null,t.uploadMethodId="unknown",t.alphaMode="no-premultiply-alpha",B.returnTexture(e)}decreaseReferenceCount(e){const t=this._activeTextures[e];t.usageCount--,t.usageCount===0&&(H.returnCanvasAndContext(t.canvasAndContext),this.returnTexture(t.texture),this._activeTextures[e]=null)}getReferenceCount(e){return this._activeTextures[e].usageCount}renderTextToCanvas(e,t,r,a){var C,v,R,D;const{canvas:i,context:s}=a,n=yt(t),u=F.measureText(e||" ",t),l=u.lines,c=u.lineHeight,d=u.lineWidths,f=u.maxLineWidth,m=u.fontProperties,p=i.height;if(s.resetTransform(),s.scale(r,r),s.textBaseline=t.textBaseline,(C=t._stroke)!=null&&C.width){const S=t._stroke;s.lineWidth=S.width,s.miterLimit=S.miterLimit,s.lineJoin=S.join,s.lineCap=S.cap}s.font=n;let h,_;const x=t.dropShadow?2:1;for(let S=0;S<x;++S){const M=t.dropShadow&&S===0,U=M?Math.ceil(Math.max(1,p)+t.padding*2):0,Qe=U*r;if(M){s.fillStyle="black",s.strokeStyle="black";const y=t.dropShadow,Je=y.color,Ze=y.alpha;s.shadowColor=ve.shared.setValue(Je).setAlpha(Ze).toRgbaString();const et=y.blur*r,ie=y.distance*r;s.shadowBlur=et,s.shadowOffsetX=Math.cos(y.angle)*ie,s.shadowOffsetY=Math.sin(y.angle)*ie+Qe}else{if(s.fillStyle=t._fill?le(t._fill,s,u):null,(v=t._stroke)!=null&&v.width){const y=t._stroke.width*t._stroke.alignment;s.strokeStyle=le(t._stroke,s,u,y)}s.shadowColor="black"}let ae=(c-m.fontSize)/2;c-m.fontSize<0&&(ae=0);const se=((R=t._stroke)==null?void 0:R.width)??0;for(let y=0;y<l.length;y++)h=se/2,_=se/2+y*c+m.ascent+ae,t.align==="right"?h+=f-d[y]:t.align==="center"&&(h+=(f-d[y])/2),(D=t._stroke)!=null&&D.width&&this._drawLetterSpacing(l[y],t,a,h+t.padding,_+t.padding-U,!0),t._fill!==void 0&&this._drawLetterSpacing(l[y],t,a,h+t.padding,_+t.padding-U)}}_drawLetterSpacing(e,t,r,a,i,s=!1){const{context:n}=r,u=t.letterSpacing;let l=!1;if(F.experimentalLetterSpacingSupported&&(F.experimentalLetterSpacing?(n.letterSpacing=`${u}px`,n.textLetterSpacing=`${u}px`,l=!0):(n.letterSpacing="0px",n.textLetterSpacing="0px")),u===0||l){s?n.strokeText(e,a,i):n.fillText(e,a,i);return}let c=a;const d=F.graphemeSegmenter(e);let f=n.measureText(e).width,m=0;for(let p=0;p<d.length;++p){const h=d[p];s?n.strokeText(h,c,i):n.fillText(h,c,i);let _="";for(let x=p+1;x<d.length;++x)_+=d[x];m=n.measureText(_).width,c+=f-m+u,f=m}}destroy(){this._activeTextures=null}}$e.extension={type:[g.WebGLSystem,g.WebGPUSystem,g.CanvasSystem],name:"canvasText"};T.add(Me);T.add(Ue);T.add(ke);T.add(Tt);T.add(Ie);T.add(Oe);T.add(Ve);T.add($e);T.add(Ne);T.add(je);T.add(re);T.add(Ke);T.add(Xe);T.add(Ye);T.add(Fe);T.add(Ge);
